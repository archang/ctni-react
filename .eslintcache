[{"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\studies.js":"1","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\storage.js":"2","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\logout-button.js":"4","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\index.js":"5","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\App.js":"6","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\home.js":"7","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\authentication-button.js":"8","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\index.js":"9","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\auth\\auth0-provider-with-history.js":"10","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\auth\\protected-route.js":"11","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\http-common.js":"12","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\services\\upload-files.service.js":"13","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\loading.js":"14","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\auth-nav.js":"15","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\login-button.js":"16"},{"size":24778,"mtime":1614716363807,"results":"17","hashOfConfig":"18"},{"size":5690,"mtime":1614979953180,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1607561768090,"results":"20","hashOfConfig":"18"},{"size":973,"mtime":1613513025835,"results":"21","hashOfConfig":"18"},{"size":134,"mtime":1613597628195,"results":"22","hashOfConfig":"18"},{"size":779,"mtime":1613597229569,"results":"23","hashOfConfig":"18"},{"size":1458,"mtime":1614456268389,"results":"24","hashOfConfig":"18"},{"size":353,"mtime":1613597292543,"results":"25","hashOfConfig":"18"},{"size":761,"mtime":1610662838137,"results":"26","hashOfConfig":"18"},{"size":728,"mtime":1610662838096,"results":"27","hashOfConfig":"18"},{"size":414,"mtime":1610662838096,"results":"28","hashOfConfig":"18"},{"size":162,"mtime":1613515036035,"results":"29","hashOfConfig":"18"},{"size":438,"mtime":1613515036039,"results":"30","hashOfConfig":"18"},{"size":263,"mtime":1610662838099,"results":"31","hashOfConfig":"18"},{"size":225,"mtime":1610662838097,"results":"32","hashOfConfig":"18"},{"size":1014,"mtime":1610662838100,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"kcjmgy",{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\studies.js",["70","71","72","73","74","75","76","77"],"import React, {useEffect, useState} from 'react'\r\nimport { useAuth0, withAuthenticationRequired } from \"@auth0/auth0-react\";\r\nimport  Loading from './loading'\r\n\r\nimport styled from 'styled-components'\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGroupBy,\r\n    useRowSelect,\r\n  useExpanded,\r\n} from 'react-table'\r\nimport matchSorter from 'match-sorter'\r\nimport ctni_logo from '../ctni_logo.jpg';\r\nimport AuthNav from \"./auth-nav\";\r\n// import { useSticky } from 'react-table-sticky';\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n  \r\n  .ctni-logo-class {\r\n    position: absolute;\r\n    display: block;\r\n    left: 50%;\r\n    margin-top: 10px;\r\n    transform: translate(-50%, -50%) scale(.5);\r\n  }\r\n  \r\n\r\n  \r\n  \r\n  \r\n  .table-sticky {\r\n    margin-top: 40px;\r\n    height: 85%;\r\n    width: 90%;\r\n    position:fixed;\r\n    overflow:auto;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n    margin-left: 220px;\r\n    // margin-top: 40px;\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :nth-child(even) {\r\n        background-color: #F2F2F2;\r\n      }\r\n      :nth-child(odd) {\r\n        background-color: #FAFBFD;\r\n      }\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n      th:first-child {\r\n        text-align: left;\r\n        font-weight: normal;\r\n        position: sticky;\r\n        left: 0px;\r\n        z-index: 40;\r\n        background-color: inherit;\r\n      }\r\n    }\r\n    tbody {\r\n      display: block;\r\n    }\r\n\r\n\r\n    thead > tr {\r\n      position: sticky;\r\n      left: 0;\r\n      top: 0;\r\n      z-index: 1;\r\n      height: 70px;\r\n      display: block;\r\n      th:first-child {\r\n        background-color: \"e5e3e8\";\r\n        text-align: center;\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      min-width: 11rem;\r\n      text-align: center;\r\n      font-size: 1rem;\r\n      vertical-align: middle;  \r\n      max-width: 11rem;\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid \"e5e3e8\";\r\n      border-right: 1px solid \"e5e3e8\";\r\n    }\r\n    \r\n    th {\r\n      font-size: 1rem;\r\n    }\r\n\r\n    td {\r\n      input {\r\n        border: 1;\r\n        font-size: .75rem;\r\n        width: 0.5rem;\r\n        padding: 1;\r\n        margin: 1;\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  .pagination {\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 20px;\r\n    transform: scale(2) translate(-20%, -50%);\r\n  }\r\n  \r\n  .json-info {\r\n    margin-left: 280px;\r\n  }\r\n  .action {\r\n    margin-left: 280px;\r\n    padding: 10px 15px;\r\n    bottom: 20px;\r\n    right: 22px;\r\n    z-index: 20;\r\n    color: #ffffff;\r\n    position: fixed;\r\n    font-size:32px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    background-color: #32a852;\r\n    border-radius: 10px;\r\n    box-shadow: 0 3px #999;\r\n  }\r\n  \r\n  .action:hover {\r\n    background-color: #3e8e41\r\n  }\r\n\r\n  .action:active {\r\n    background-color: #3e8e41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(3px);\r\n}\r\n \r\n  \r\n  \r\n  .table-body-row:hover {\r\n    background-color: #ebd834;\r\n  }\r\n  .table-body-row-selected {\r\n    background-color: #fa3928;\r\n  }\r\n  \r\n  .reset-filters-button {\r\n    z-index: 99;\r\n    padding: 10px 15px;\r\n    color: #ffffff;\r\n    font-size:22px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    border-radius: 10px;\r\n    box-shadow: 0 3px #999;\r\n    margin-left: 300px;\r\n    bottom: 20px;\r\n    background-color: #d13e24;\r\n    position: fixed;\r\n  }\r\n  \r\n    .upload-button {\r\n    left: 70%;\r\n    padding: 10px 15px;\r\n    top: 10px;\r\n    z-index: 20;\r\n    color: #ffffff;\r\n    position: fixed;\r\n    font-size:18px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    background-color: #0068E6;\r\n    border-radius: 10px;\r\n    box-shadow: 0 3px #999;\r\n  }\r\n  \r\n    .upload-button:hover {\r\n    background-color: #155cb3;\r\n  }\r\n  .upload-button:active {\r\n    background-color: #155cb3;\r\n    box-shadow: 0 5px #666;\r\n    // transform: translateY(.5px);\r\n}\r\n    \r\n  .reset-filters-button:hover {\r\n    background-color: #8e473e;\r\n  }\r\n\r\n  .reset-filters-button:active {\r\n    background-color: #8e473e;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(3px);\r\n  }\r\n}\r\n  .upload-button {\r\n    left: 70%;\r\n    padding: 10px 15px;\r\n    top: 10px;\r\n    z-index: 20;\r\n    color: #ffffff;\r\n    position: fixed;\r\n    font-size:18px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    background-color: #0068E6;\r\n    border-radius: 10px;\r\n    box-shadow: 0 3px #999;\r\n  }\r\n  \r\n    .upload-button:hover {\r\n    background-color: #155cb3;\r\n  }\r\n  .upload-button:active {\r\n    background-color: #155cb3;\r\n    box-shadow: 0 5px #666;\r\n    // transform: translateY(.5px);\r\n}\r\n`\r\n\r\n// Create an editable cell renderer\r\n\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search`}\r\n    />\r\n  )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      options.add(row.values[id])\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Be sure to pass our updateMyData and the skipReset option\r\n//function Table({ columns, data, updateMyData, skipReset })\r\nfunction Table({ columns, data, skipReset, setSelectedRows }) {\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n      // And also our default editable cell\r\n    }),\r\n    []\r\n  )\r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n      disableSubRowSelect,\r\n    getToggleHideAllColumnsProps,\r\n    getTableBodyProps,\r\n      allColumns,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n      setAllFilters,\r\n       selectedFlatRows,\r\n    state: {\r\n      pageIndex,\r\n      pageSize,\r\n      sortBy,\r\n      groupBy,\r\n      expanded,\r\n      filters,\r\n      selectedRowIds,\r\n    },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageSize: 20 },\r\n      defaultColumn,\r\n      filterTypes,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      // We also need to pass this so the page doesn't change\r\n      // when we edit the data.\r\n      autoResetPage: !skipReset,\r\n      autoResetSelectedRows: !skipReset,\r\n      disableMultiSort: true,\r\n    },\r\n    useFilters,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n      useRowSelect,\r\n      // useSticky,\r\n\r\n          hooks => {\r\n      hooks.visibleColumns.push(columns => {\r\n        return [\r\n          {\r\n            id: 'selection',\r\n            // Make this column a groupByBoundary. This ensures that groupBy columns\r\n            // are placed after it\r\n            groupByBoundary: false,\r\n            // The header can use the table's getToggleAllRowsSelectedProps method\r\n            // to render a checkbox\r\n            Header: ({ getToggleAllRowsSelectedProps }) => (\r\n              <div>\r\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n              </div>\r\n            ),\r\n            // The cell can use the individual row's getToggleRowSelectedProps method\r\n            // to the render a checkbox\r\n            Cell: ({ row }) =>\r\n                disableSubRowSelect  && row.depth > 0 ? null : (\r\n              <div>\r\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n              </div>\r\n            ),\r\n          },\r\n          ...columns,\r\n        ]\r\n      })\r\n    }\r\n  )\r\n  React.useEffect(()=>{\r\n    setSelectedRows(selectedRowIds);\r\n  },[setSelectedRows,selectedRowIds])\r\n\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n        <div class=\"column-filters\">\r\n        <div class=\"toggle-all-columns\">\r\n          <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\r\n          All\r\n        </div>\r\n        {allColumns.map(column => (\r\n          <div key={column.id}>\r\n            <label class=\"individual-columns\">\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n              {column.id}\r\n            </label>\r\n          </div>\r\n        ))}\r\n        <br />\r\n      </div>\r\n      <button className=\"reset-filters-button\" onClick={() => setAllFilters([])}>Reset Filters</button>\r\n      <div className=\"table-sticky\">\r\n      <table {...getTableProps()}>\r\n        <thead className=\"header\">\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  <div>\r\n                    {column.canGroupBy ? (\r\n                      // If the column can be grouped, let's add a toggle\r\n                      <span {...column.getGroupByToggleProps()}>\r\n                        {column.isGrouped ? '🛑 ' : '⭕ '}\r\n                      </span>\r\n                    ) : null}\r\n                    <span {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      {/* Add a sort direction indicator */}\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                  </div>\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}\r\n                  className=\"table-body-row\"\r\n                  // onClick={() => console.log(row.original)}\r\n                  onClick={() => {row.toggleRowSelected()}\r\n                  // row.isSelected ？ （\r\n                  }\r\n                  >\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? '📖' : '📕'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell', { editable: false })} (\r\n                          {row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell', { editable: true })\r\n                      )}\r\n                    </td>\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      </div>\r\n      <a href=\"https://web.northeastern.edu/ctni/\">\r\n      <img className=\"ctni-logo-class\" src={ctni_logo} alt=\"Logo\" />;\r\n      </a>\r\n      {/*<div className=\"login-button\">*/}\r\n      <AuthNav />\r\n        <pre>\r\n        <div className=\"selected-rows\">\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedRowIds: selectedRowIds,\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code></div>\r\n      </pre>\r\n            <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter(row => {\r\n    const rowValue = row.values[id]\r\n    return rowValue >= filterValue\r\n  })\r\n}\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\r\nfunction roundedMedian(leafValues) {\r\n  let min = leafValues[0] || 0\r\n  let max = leafValues[0] || 0\r\n\r\n  leafValues.forEach(value => {\r\n    min = Math.min(min, value)\r\n    max = Math.max(max, value)\r\n  })\r\n\r\n  return Math.round((min + max) / 2)\r\n}\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n      </>\r\n    )\r\n  }\r\n)\r\nconst Studies = () => {\r\n// var Studies = function() {\r\n// function Studies() {\r\n  // <div className=\"fixed-header\">\r\n\r\n    const [studies, setStudies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/studies\").then(response =>\r\n            response.json().then(data => {\r\n                setStudies(data);\r\n            })\r\n        );\r\n    }, []);\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Studies',\r\n        columns: [\r\n          {\r\n            Header: 'Name.',\r\n            accessor: 'Study_ID',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            aggregate: 'unique',\r\n            canGroupBy: true,\r\n          },\r\n          {\r\n            Header: 'Owner',\r\n            accessor: 'Study_Owner',\r\n            aggregate: 'unique',\r\n          },\r\n\r\n          {\r\n            Header: 'Desc.',\r\n            accessor: 'Study_Description',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            aggregate: 'unique',\r\n            canGroupBy: false,\r\n          },\r\n          {\r\n            Header: 'Rating',\r\n            accessor: 'Study_Rating',\r\n            Filter: SelectColumnFilter,\r\n            filter: 'includes',\r\n            aggregate: 'unique',\r\n            canGroupBy: false,\r\n          },\r\n          {\r\n            Header: 'Comments',\r\n            accessor: 'Study_Comments',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            aggregate: 'unique',\r\n            canGroupBy: false,\r\n          },\r\n\r\n        ],\r\n      },\r\n      {\r\n        Header: ' ',\r\n        columns: [\r\n          {\r\n            Header: 'ID',\r\n            accessor: 'Scan_ID',\r\n            Filter: SliderColumnFilter,\r\n            filter: 'equals',\r\n            canGroupBy: false,\r\n          },\r\n          {\r\n            Header: 'Name',\r\n            accessor: 'Scan_Name',\r\n            Filter: SelectColumnFilter,\r\n            filter: 'includes',\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Time',\r\n            accessor: 'Scan_Time',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'FOV',\r\n            accessor: 'FOV',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Echotime',\r\n            accessor: 'Echotime',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${parseFloat(value).toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Rep. Time',\r\n            accessor: 'Repetitiontime',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${value.toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: '# Rep.',\r\n            accessor: 'Nrepetition',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${value.toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Spat. Res.',\r\n            accessor: 'SpatResol',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Thickness',\r\n            accessor: 'SliceThick',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${value.toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: '# Slice',\r\n            accessor: 'NSlice',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${value.toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Slice Gap',\r\n            accessor: 'SliceGap',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${value.toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n            {\r\n            Header: 'Slice Dist.',\r\n            accessor: 'SliceDistance',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'average',\r\n            Aggregated: ({ value }) => `${value.toFixed(2)} (avg)`,\r\n            canGroupBy: false,\r\n          },\r\n          {\r\n            Header: 'Orientation',\r\n            accessor: 'SliceOrient',\r\n            Filter: SelectColumnFilter,\r\n            filter: 'includes',\r\n            canGroupBy: false,\r\n          }\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  )\r\n\r\n  const data = studies\r\n  const [selectedRows, setSelectedRows] = React.useState({});\r\n  return (\r\n    <Styles>\r\n      <button className=\"action\" onClick={()=>alert(JSON.stringify(selectedRows, null ,2))}>Download</button>\r\n      <a href=\"http://localhost:3000/storage\" className=\"upload-button\">Upload</a>\r\n\r\n\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        setSelectedRows={setSelectedRows}\r\n        //updateMyData={updateMyData}\r\n      />\r\n    </Styles>\r\n  )\r\n      // </div>\r\n}\r\n\r\n\r\n// export default Studies\r\n\r\nexport default withAuthenticationRequired(Studies, {\r\n  onRedirecting: () => <Loading />,\r\n});",["78","79"],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\storage.js",["80","81","82","83"],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\logout-button.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\index.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\App.js",["84","85"],"import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\n\r\nimport {Home, Studies} from \"./components\";\r\nimport ProtectedRoute from \"./auth/protected-route\";\r\nimport UploadFiles from \"./components/storage\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div id=\"app\" className=\"d-flex flex-column h-100\">\r\n      <div className=\"container flex-grow-1\">\r\n        <div className=\"mt-5\">\r\n          {/*<BrowserRouter>*/}\r\n            <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path='/studies' component={Studies} />\r\n            <Route path=\"/storage\" component={UploadFiles} />\r\n          </Switch>\r\n          {/*</BrowserRouter>*/}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\home.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\authentication-button.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\index.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\auth\\auth0-provider-with-history.js",[],["86","87"],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\auth\\protected-route.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\http-common.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\services\\upload-files.service.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\loading.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\auth-nav.js",[],"C:\\Users\\Admin\\PycharmProjects\\ctni-react\\src\\components\\login-button.js",[],{"ruleId":"88","severity":1,"message":"89","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":18},{"ruleId":"88","severity":1,"message":"92","line":244,"column":9,"nodeType":"90","messageId":"91","endLine":244,"endColumn":14},{"ruleId":"88","severity":1,"message":"93","line":440,"column":8,"nodeType":"90","messageId":"91","endLine":440,"endColumn":24},{"ruleId":"88","severity":1,"message":"94","line":444,"column":7,"nodeType":"90","messageId":"91","endLine":444,"endColumn":13},{"ruleId":"88","severity":1,"message":"95","line":445,"column":7,"nodeType":"90","messageId":"91","endLine":445,"endColumn":14},{"ruleId":"88","severity":1,"message":"96","line":446,"column":7,"nodeType":"90","messageId":"91","endLine":446,"endColumn":15},{"ruleId":"88","severity":1,"message":"97","line":447,"column":7,"nodeType":"90","messageId":"91","endLine":447,"endColumn":14},{"ruleId":"88","severity":1,"message":"98","line":674,"column":10,"nodeType":"90","messageId":"91","endLine":674,"endColumn":23},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"88","severity":1,"message":"103","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":13},{"ruleId":"88","severity":1,"message":"104","line":205,"column":13,"nodeType":"90","messageId":"91","endLine":205,"endColumn":26},{"ruleId":"88","severity":1,"message":"105","line":205,"column":28,"nodeType":"90","messageId":"91","endLine":205,"endColumn":41},{"ruleId":"88","severity":1,"message":"106","line":205,"column":43,"nodeType":"90","messageId":"91","endLine":205,"endColumn":50},{"ruleId":"88","severity":1,"message":"107","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":23},{"ruleId":"88","severity":1,"message":"108","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":22},{"ruleId":"99","replacedBy":"109"},{"ruleId":"101","replacedBy":"110"},"no-unused-vars","'useAuth0' is defined but never used.","Identifier","unusedVar","'count' is assigned a value but never used.","'selectedFlatRows' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'groupBy' is assigned a value but never used.","'expanded' is assigned a value but never used.","'filters' is assigned a value but never used.","'roundedMedian' is defined but never used.","no-native-reassign",["111"],"no-negated-in-lhs",["112"],"'axios' is defined but never used.","'selectedFiles' is assigned a value but never used.","'progressInfos' is assigned a value but never used.","'message' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'ProtectedRoute' is defined but never used.",["111"],["112"],"no-global-assign","no-unsafe-negation"]