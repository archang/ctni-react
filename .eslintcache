[{"/Users/dhwanildesai/PycharmProjects/ctni-react/src/reportWebVitals.js":"1","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/studies.js":"2","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/authentication-button.js":"3","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/login-button.js":"4","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/share.js":"5","/Users/dhwanildesai/PycharmProjects/ctni-react/src/auth/auth0-provider-with-history.js":"6","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/index.js":"7","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/home.js":"8","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/manage.js":"9","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/auth-nav.js":"10","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/main-nav.js":"11","/Users/dhwanildesai/PycharmProjects/ctni-react/src/App.js":"12","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/storage.js":"13","/Users/dhwanildesai/PycharmProjects/ctni-react/src/services/upload-files.service.js":"14","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/loading.js":"15","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/logout-button.js":"16","/Users/dhwanildesai/PycharmProjects/ctni-react/src/auth/protected-route.js":"17","/Users/dhwanildesai/PycharmProjects/ctni-react/src/makeData.js":"18"},{"size":362,"mtime":1614982557348,"results":"19","hashOfConfig":"20"},{"size":31307,"mtime":1615516752728,"results":"21","hashOfConfig":"20"},{"size":388,"mtime":1614982557255,"results":"22","hashOfConfig":"20"},{"size":965,"mtime":1614982557257,"results":"23","hashOfConfig":"20"},{"size":2595,"mtime":1615931615978,"results":"24","hashOfConfig":"20"},{"size":702,"mtime":1614982557253,"results":"25","hashOfConfig":"20"},{"size":208,"mtime":1614982557257,"results":"26","hashOfConfig":"20"},{"size":1433,"mtime":1614982557256,"results":"27","hashOfConfig":"20"},{"size":1380,"mtime":1614982557258,"results":"28","hashOfConfig":"20"},{"size":216,"mtime":1614982557255,"results":"29","hashOfConfig":"20"},{"size":759,"mtime":1614982557258,"results":"30","hashOfConfig":"20"},{"size":910,"mtime":1614982557252,"results":"31","hashOfConfig":"20"},{"size":5962,"mtime":1614982557260,"results":"32","hashOfConfig":"20"},{"size":417,"mtime":1614982557348,"results":"33","hashOfConfig":"20"},{"size":252,"mtime":1614982557257,"results":"34","hashOfConfig":"20"},{"size":926,"mtime":1614982557258,"results":"35","hashOfConfig":"20"},{"size":400,"mtime":1614982557253,"results":"36","hashOfConfig":"20"},{"size":906,"mtime":1614982557347,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"q1inn9",{"filePath":"41","messages":"42","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":1,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dhwanildesai/PycharmProjects/ctni-react/src/reportWebVitals.js",[],["82","83"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/studies.js",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"import React, {useEffect, useState} from 'react'\n\nimport { useAuth0, withAuthenticationRequired } from \"@auth0/auth0-react\";\nimport  Loading from './loading'\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { saveAs } from 'file-saver';\nimport styled from 'styled-components'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\n\n//import {widthPercentageToDP as wp, heightPercentageToDP as hp} from 'react-native-responsive-screen'\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n    useRowSelect,\n  useExpanded,\n} from 'react-table'\nimport matchSorter from 'match-sorter'\nimport jsondata from '../data.json'\nimport jsontestdata from '../testdata.json'\nimport makeData from '../makeData'\nimport ctni_logo from '../ctni_logo.jpg';\nimport AuthNav from \"./auth-nav\";\nimport http from \"../http-common\";\nimport async from \"async\";\n\nvar sharedgrabbedarray=[];\n let h=\"hello\"\n// import { useSticky } from 'react-table-sticky';\n\n// const nodemailer = require('nodemailer');\n// const smtpTransport = require('nodemailer-smtp-transport');\n// const cors = require(\"cors\")({\n//   origin: true\n// });\nconst Styles = styled.div`\n  padding: 1rem;\n  flex: 1;\n   \n  .ctni-logo-class {\n    position: absolute;\n    display: block;\n    left: 50%;\n    margin-top: 10px;\n    transform: translate(-50%, -50%) scale(.5);\n  }\n  \n\n  ButtonDropdown.propTypes = {\n  disabled: PropTypes.bool,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  group: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  tag: PropTypes.string,\n  toggle: PropTypes.func\n};\n\nDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  'data-toggle': PropTypes.string,\n  'aria-haspopup': PropTypes.bool\n};\n  \n  \n  .table-sticky {\n    margin-top: 40px;\n    height: 85%;\n    width: 90%;\n    position:fixed;\n    overflow:auto;\n  }\n\n  table {\n    width: 100%;\n    margin-left: 220px;\n    // margin-top: 40px;\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :nth-child(even) {\n        background-color: #F2F2F2;\n      }\n      :nth-child(odd) {\n        background-color: #FAFBFD;\n      }\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n      th:first-child {\n        text-align: left;\n        font-weight: normal;\n        position: sticky;\n        left: 0px;\n        z-index: 40;\n        background-color: inherit;\n      }\n    }\n    tbody {\n      display: block;\n    }\n\n\n    thead > tr {\n      position: sticky;\n      left: 0;\n      top: 0;\n      z-index: 1;\n      height: 70px;\n      display: block;\n      th:first-child {\n        background-color: \"e5e3e8\";\n        text-align: center;\n      }\n    }\n\n    th,\n    td {\n      min-width: 11rem;\n      text-align: center;\n      font-size: 1rem;\n      vertical-align: middle;  \n      max-width: 11rem;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid \"e5e3e8\";\n      border-right: 1px solid \"e5e3e8\";\n    }\n    \n    th {\n      font-size: 1rem;\n    }\n\n    td {\n      input {\n        border: 1;\n        font-size: .75rem;\n        width: 0.5rem;\n        padding: 1;\n        margin: 1;\n      }\n    }\n  }\n  \n\n  .pagination {\n    position: absolute;\n    left: 50%;\n    bottom: 20px;\n    transform: scale(2) translate(-20%, -50%);\n  }\n  \n  .json-info {\n    margin-left: 280px;\n  }\n  .action {\n    margin-left: 280px;\n    padding: 10px 15px;\n    bottom: 20px;\n    right: 22px;\n    z-index: 20;\n    color: #ffffff;\n    position: fixed;\n    font-size:32px;\n    cursor: pointer;\n    text-align: center;\n    background-color: #32a852;\n    border-radius: 10px;\n    box-shadow: 0 3px #999;\n  }\n  \n  .action:hover {\n    background-color: #3e8e41\n  }\n\n  .action:active {\n    background-color: #3e8e41;\n    box-shadow: 0 5px #666;\n    //transform: translateY(3px);\n}\n.option {\n    \n    z-index: 20;\n    // color: #ffffff;\n   //height:20px;\n    font-size:12px;\n    cursor: pointer;\n    text-align: center;\n   \n    border-radius: 10px;\n    box-shadow: 0 3px #999;\n  }\n  \n  .option:hover {\n    background-color: #3e8e41\n  }\n\n  .option:active {\n    background-color: #3e8e41;\n    box-shadow: 0 5px #666;\n    //transform: translateY(3px);\n}\n \n  \n  \n  .table-body-row:hover {\n    background-color: #ebd834;\n  }\n  .table-body-row-selected {\n    background-color: #fa3928;\n  }\n  \n  .reset-filters-button {\n    z-index: 99;\n    padding: 10px 15px;\n    color: #ffffff;\n    font-size:22px;\n    cursor: pointer;\n    text-align: center;\n    border-radius: 10px;\n    box-shadow: 0 3px #999;\n    margin-left: 300px;\n    bottom: 20px;\n    background-color: #d13e24;\n    position: fixed;\n  }\n  \n    .upload-button {\n    left: 70%;\n    padding: 10px 15px;\n    top: 10px;\n    z-index: 20;\n    color: #ffffff;\n    position: fixed;\n    font-size:18px;\n    cursor: pointer;\n    text-align: center;\n    background-color: #0068E6;\n    border-radius: 10px;\n    box-shadow: 0 3px #999;\n   \n  }\n  .share-button {\n    left: 40%;\n    padding: 50px 75px;\n    top: 20px;\n    \n    color: #ffffff;\n    position: fixed;\n    font-size:18px;\n    cursor: pointer;\n    text-align: center;\n    background-color: #0068E6;\n    border-radius: 10px;\n    box-shadow: 0 3px #999;\n   \n  }\n  \n    .upload-button:hover {\n    background-color: #155cb3;\n  }\n  .upload-button:active {\n    background-color: #155cb3;\n    box-shadow: 0 5px #666;\n    // transform: translateY(.5px);\n}\n    \n  .reset-filters-button:hover {\n    background-color: #8e473e;\n  }\n\n  .reset-filters-button:active {\n    background-color: #8e473e;\n    box-shadow: 0 5px #666;\n    transform: translateY(3px);\n  }\n}\n \n`\n\n// Create an editable cell renderer\n\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={e => {\n          setFilter(parseInt(e.target.value, 10))\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <input\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '70px',\n          marginRight: '0.5rem',\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '70px',\n          marginLeft: '0.5rem',\n        }}\n      />\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Be sure to pass our updateMyData and the skipReset option\n//function Table({ columns, data, updateMyData, skipReset })\nfunction Table({ columns, data, skipReset, setSelectedRows }) {\n\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      // And also our default editable cell\n    }),\n    []\n  )\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getToggleHideAllColumnsProps,\n    getTableBodyProps,\n      allColumns,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n      setAllFilters,\n       selectedFlatRows,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds,\n    },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageSize: 20 },\n      defaultColumn,\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      autoResetPage: !skipReset,\n      autoResetSelectedRows: !skipReset,\n      disableMultiSort: true,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n      useRowSelect,\n      // useSticky,\n\n          hooks => {\n      hooks.visibleColumns.push(columns => {\n        return [\n          {\n            id: 'selection',\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: false,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ]\n      })\n    }\n  )\n  React.useEffect(()=>{\n    setSelectedRows(selectedRowIds);\n  },[setSelectedRows,selectedRowIds])\n\n\n  // Render the UI for your table\n  return (\n    <>\n        <div class=\"column-filters\">\n        <div class=\"toggle-all-columns\">\n          <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\n          All\n        </div>\n        {allColumns.map(column => (\n          <div key={column.id}>\n            <label class=\"individual-columns\">\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\n              {column.id}\n            </label>\n          </div>\n        ))}\n        <br />\n      </div>\n      <button className=\"reset-filters-button\" onClick={() => setAllFilters([])}>Reset Filters</button>\n      <div className=\"table-sticky\">\n      <table {...getTableProps()}>\n        <thead className=\"header\">\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  <div>\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span {...column.getGroupByToggleProps()}>\n                        {column.isGrouped ? '🛑 ' : '⭕ '}\n                      </span>\n                    ) : null}\n                    <span {...column.getSortByToggleProps()}>\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </div>\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}\n                  className=\"table-body-row\"\n                  // onClick={() => console.log(row.original)}\n                  onClick={() => {row.toggleRowSelected()}\n                  // row.isSelected ？ （\n                  }\n                  >\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>\n                      {cell.isGrouped ? (\n                        // If it's a grouped cell, add an expander and row count\n                        <>\n                          <span {...row.getToggleRowExpandedProps()}>\n                            {row.isExpanded ? '📖' : '📕'}\n                          </span>{' '}\n                          {cell.render('Cell', { editable: false })} (\n                          {row.subRows.length})\n                        </>\n                      ) : cell.isAggregated ? (\n                        // If the cell is aggregated, use the Aggregated\n                        // renderer for cell\n                        cell.render('Aggregated')\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                        // Otherwise, just render the regular cell\n                        cell.render('Cell', { editable: true })\n                      )}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      </div>\n      <a href=\"https://web.northeastern.edu/ctni/\">\n      <img className=\"ctni-logo-class\" src={ctni_logo} alt=\"Logo\" />;\n      </a>\n      {/*<div className=\"login-button\">*/}\n      <AuthNav />\n        <pre>\n        <div className=\"selected-rows\">\n        <code>\n          {JSON.stringify(\n            {\n              selectedRowIds: selectedRowIds,\n            },\n            null,\n            2\n          )}\n        </code></div>\n      </pre>\n            <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n\n    </>\n  )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= filterValue\n  })\n}\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0\n  let max = leafValues[0] || 0\n\n  leafValues.forEach(value => {\n    min = Math.min(min, value)\n    max = Math.max(max, value)\n  })\n\n  return Math.round((min + max) / 2)\n}\n\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef()\n    const resolvedRef = ref || defaultRef\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate\n    }, [resolvedRef, indeterminate])\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    )\n  }\n)\nconst Studies = () =>{\n// var Studies = function() {\n// function Studies() {\n  // <div className=\"fixed-header\">\n\n  const [studies, setStudies] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/studies\").then(response =>\n        response.json().then(data => {\n          setStudies(data);\n        })\n    );\n  }, []);\n\n\n//initialize jsZip\n  var JSZip = require(\"jszip\");\n  let zip = new JSZip();\n  let photoZip = zip.folder();\n\n// useEffect(() => {\n//      //// API call to load job info from dynamo db\n//   function loadJob() {\n//     return API.get(\"api name\", \"/tablename/tableinfo\", {\n//   'queryStringParameters': {jobId: props.match.params.id}\n//    });\n//   }\n//    /// onload function to load job info and get a count of files\n//     async function onLoad() {\n//\n//       try {\n//         const job = await loadJob();\n//         setJob(job[0])\n//\n//         const ImagesUploaded = await Storage.list(`${job[0].jobId}`);\n//         setImagesUploaded(ImagesUploaded);\n//\n//         } catch (e) {\n//           alert(e);\n//       }\n//\n//     }\n//\n//     onLoad();\n//   }, [props.match.params.id,]);\n\n\n  /// On download button click, loop through / download images using the key given from storage.list in onload function\n  async function handleDownloadClick(event) {\n    event.preventDefault();\n    console.log(selectedRows)\n    let studygrabbedarray = [];\n    for (let i in selectedRows) {\n      console.log(\"id\", i)\n      studygrabbedarray.push(studies[i])\n      console.log(\"hi\", studygrabbedarray);\n    }\n    var unique = studygrabbedarray.filter((v, i, a) => a.indexOf(v) === i);\n    http.post(\"/download\", unique, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      });\n\n  }\n\n\n\n  function handleShareClick(event) {\n  event.preventDefault();\nconsole.log(\"mama\")\n  console.log(selectedRows)\n\n  // const enteredEmail = prompt('Please enter recipient email ');\n  // console.log(\"emaillll\",enteredEmail);\n\n  for (let i in selectedRows) {\n    console.log(\"id\", i)\n    sharedgrabbedarray.push(studies[i])\n    console.log(\"hihuy\", sharedgrabbedarray);\n  }\n\n\n\n\n  // var sesAccessKey = 'abarkha1@gmail.com';\n  //    var sesSecretKey = 'Aero8568';\n  //\n  //   // let testAccount = await nodemailer.createTestAccount();\n  //\n  //   // create reusable transporter object using the default SMTP transport\n  //   let transporter = nodemailer.createTransport(smtpTransport({\n  //     service: 'gmail',\n  //     auth: {\n  //         user: sesAccessKey,\n  //         pass: sesSecretKey\n  //     }\n  //   }));\n  //\n  //   // send mail with defined transport object\n  //   let info = await transporter.sendMail({\n  //       from: '\"Fred Foo 👻\" <foo@example.com>', // sender address\n  //       to: 'abarkha1@gmail.com', // list of receivers\n  //       subject: 'Hello ✔', // Subject line\n  //       text: 'Hello world?', // plain text body\n  //       html: '<b>Hello world?</b>' // html body\n  //   });\n  //\n  //   console.log('Message sent: %s', info.messageId);\n  //   // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\n  //\n  //   // Preview only available when sending through an Ethereal account\n  //   console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n\n\n\n//\n\n\n  let study_name=\"Study_ID\"\n  let names=[]\n    for (let i=0;i<sharedgrabbedarray.length;i++){\n      names.push(sharedgrabbedarray[i][study_name])\n    }\n    console.log(\"hey you\", names)\n    var unique = names.filter((v, i, a) => a.indexOf(v) === i);\n    console.log(unique + \" This is line 882\");\n    console.log(sharedgrabbedarray + \" This is line 883\");\n\nwindow.location. assign(`http://localhost:3000/share?arr=${names}`);\n http.post(\"/download\", unique, {\n     headers: {\n       \"Content-Type\": \"application/json\",\n     }\n   })\n\n}\n\n\n\n\n\n  // for (var j = 0; j < studygrabbedarray.length; j++) {\n  //   let file = studygrabbedarray[j];\n  //   // formData.push('study', file);\n  //   console.log(file)\n  //   http.post(\"/download\", file, {\n  //     headers: {\n  //       \"Content-Type\": \"multipart/form-data\",\n  //     }\n  //   });\n  // }\n\n\n     //console.log(\"hello all\",studies)\n\n    // const imagesAsArray = [...selectedRows];\n    //\n    // for (let i = 0; i < imagesAsArray.length; i++) {\n    //   await DownloadFileFromS3(imagesAsArray[i]);\n    // }\n    // /// waits for \"await DownloadFileFromS3, then executes the save as which saves the zipped folder created in \"DownloadFileFromS3\"\n    // zip.generateAsync({type: \"blob\"})\n    //     .then(function (content) {\n    //       saveAs(content);\n    //     });\n\n\n\n  /// download each file from s3 and put it in the zip folder\n  // async function DownloadFileFromS3(fileToDownload) {\n  //\n  //   const result = await Storage.get(fileToDownload.key, {download: true})\n  //\n  //   let mimeType = result.ContentType\n  //   let fileName = fileToDownload.key\n  //   let blob = new Blob([result.Body], {type: mimeType})\n  //\n  //   photoZip.file(fileName[1], blob)\n  //\n  // }\n\n  // return(\n  //\n  //      <IonPage>\n  //      <IonHeader>\n  //        <IonToolbar>\n  //      <IonButtons slot=\"start\">\n  //          <IonBackButton/>\n  //      </IonButtons>\n  //          <IonTitle>Download Images</IonTitle>\n  //        </IonToolbar>\n  //      </IonHeader>\n  //      <IonContent className=\"ion-padding\">\n  //      <IonButton onclick={handleDownloadClick}> download </IonButton>\n  //      </IonContent>\n  //      </IonPage>\n  //    );\n\n\n  const columns = React.useMemo(\n      () => [\n        {\n          Header: 'Studies',\n          columns: [\n            {\n              Header: 'IDs',\n              accessor: 'Study_ID',\n            },\n            {\n              Header: 'Owner',\n              accessor: 'Study_Owner',\n              aggregate: 'unique',\n            },\n            {\n              Header: 'Desc.',\n              accessor: 'Study_Description',\n              // Use our custom `fuzzyText` filter on this column\n              filter: 'fuzzyText',\n              aggregate: 'unique',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Name.',\n              accessor: 'Study_Name',\n              // Use our custom `fuzzyText` filter on this column\n              filter: 'fuzzyText',\n              aggregate: 'unique',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Rating',\n              accessor: 'Study_Rating',\n              Filter: SelectColumnFilter,\n              filter: 'includes',\n              aggregate: 'unique',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Comments',\n              accessor: 'Study_Comments',\n              // Use our custom `fuzzyText` filter on this column\n              filter: 'fuzzyText',\n              aggregate: 'unique',\n              canGroupBy: false,\n            },\n\n          ],\n        },\n        {\n          Header: ' ',\n          columns: [\n            {\n              Header: 'ID',\n              accessor: 'Scan_ID',\n              Filter: SliderColumnFilter,\n              filter: 'equals',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Name',\n              accessor: 'Scan_Name',\n              Filter: SelectColumnFilter,\n              filter: 'includes',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Time',\n              accessor: 'Scan_Time',\n              // Use our custom `fuzzyText` filter on this column\n              filter: 'fuzzyText',\n              canGroupBy: false,\n            },\n            {\n              Header: 'FOV',\n              accessor: 'FOV',\n              // Use our custom `fuzzyText` filter on this column\n              filter: 'fuzzyText',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Echotime',\n              accessor: 'Echotime',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${parseFloat(value).toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: 'Rep. Time',\n              accessor: 'Repetitiontime',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${value.toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: '# Rep.',\n              accessor: 'Nrepetition',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${value.toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: 'Spat. Res.',\n              accessor: 'SpatResol',\n              // Use our custom `fuzzyText` filter on this column\n              filter: 'fuzzyText',\n              canGroupBy: false,\n            },\n            {\n              Header: 'Thickness',\n              accessor: 'SliceThick',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${value.toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: '# Slice',\n              accessor: 'NSlice',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${value.toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: 'Slice Gap',\n              accessor: 'SliceGap',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${value.toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: 'Slice Dist.',\n              accessor: 'SliceDistance',\n              Filter: NumberRangeColumnFilter,\n              filter: 'between',\n              // Aggregate the sum of all visits\n              aggregate: 'average',\n              Aggregated: ({value}) => `${value.toFixed(2)} (avg)`,\n              canGroupBy: false,\n            },\n            {\n              Header: 'Orientation',\n              accessor: 'SliceOrient',\n              Filter: SelectColumnFilter,\n              filter: 'includes',\n              canGroupBy: false,\n            }\n          ],\n        },\n      ],\n      []\n  )\n\n  const data = studies\n  const testdata = jsontestdata\n  console.log(testdata)\n  const [selectedRows, setSelectedRows] = React.useState({});\n\n  const [dropdownOpen, setOpen] = useState(false);\n\n  const toggle = () => setOpen(!dropdownOpen);\n\n\n  return (\n      <Styles>\n        <ButtonDropdown className=\"action\" isOpen={dropdownOpen} toggle={toggle}>\n          <DropdownToggle caret className=\"action\">\n            Manage\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem className=\"option\" onClick={handleDownloadClick}>Download</DropdownItem>\n            {/*()=>alert(JSON.stringify(selectedRows, null ,2))*/}\n            <DropdownItem className=\"option\"onClick={handleShareClick}   >Share</DropdownItem>\n\n            {/**/}\n          </DropdownMenu>\n        </ButtonDropdown>\n\n\n        {/*<button className=\"action\" onClick={()=>alert(JSON.stringify(selectedRows, null ,2))}>Manage</button>*/}\n        <a href=\"http://localhost:3000/storage\" className=\"upload-button\">Upload</a>\n\n\n        <Table\n            columns={columns}\n            data={data}\n            setSelectedRows={setSelectedRows}\n            //updateMyData={updateMyData}\n        />\n      </Styles>\n  )\n  // </div>\n\n}\n\n\n// export default Studies\nexport { sharedgrabbedarray}\nexport default withAuthenticationRequired(Studies, {\n  onRedirecting: () => <Loading />,\n});",["102","103"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/authentication-button.js",["104"],"import React from \"react\";\n\nimport LoginButton from \"./login-button\";\nimport LogoutButton from \"./logout-button\";\n\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport styled from \"styled-components\";\n\n\n\nconst AuthenticationButton = () => {\n  const { isAuthenticated } = useAuth0();\n\n  return isAuthenticated ? <LogoutButton /> : <LoginButton />;\n};\n\nexport default AuthenticationButton;","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/login-button.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/share.js",["105","106"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/auth/auth0-provider-with-history.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/index.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/home.js",["107"],"import React from \"react\";\nimport head_logo from '../head_logo.PNG';\nimport AuthNav from \"./auth-nav\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n  .landing-page {\n    position: absolute;\n    display: block;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%) scale(1.5);\n}\n  .login-button {\n    padding: 10px 15px;\n    z-index: 20;\n    color: #ffffff;\n    font-size:32px;\n    cursor: pointer;\n    text-align: center;\n    background-color: #0068E6;\n    border-radius: 10px;\n    box-shadow: 0 3px #999;\n    position: absolute;\n    display: block;\n    left: 50%;\n    top: 70%;\n    transform: translate(-50%, -50%);\n  }\n  \n    .login-button:hover {\n    background-color: #155cb3;\n  }\n\n  .login-button:active {\n    background-color: #155cb3;\n    box-shadow: 0 5px #666;\n    // transform: translateY(.5px);\n}\n`\n\n\nconst Home = () => (\n    <Styles>\n  <div className=\"landing-page\">\n    <img className=\"mb-3 app-logo\" src={head_logo} alt=\"React logo\" width=\"120\" />\n    <h1 className=\"mb-4\">ctni.cloud</h1>\n    <p className=\"lead\">\n      Please login to access ctni.cloud, a cloud-hosted web app for preclinical MRI labs and built by {\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://web.northeastern.edu/ctni/\"\n      >\n        CTNI\n      </a>\n      <a  href=\"/studies\" className=\"login-button\">Login</a>\n    </p>\n  </div></Styles>\n);\n\nexport default Home;\n","/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/manage.js",["108","109","110","111"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/auth-nav.js",[],["112","113"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/main-nav.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/App.js",["114","115"],"import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n\nimport {Home, Studies, Manage} from \"./components\";\nimport ProtectedRoute from \"./auth/protected-route\";\nimport UploadFiles from \"./components/storage\";\nimport share from \"./components/share\";\n\nconst App = () => {\n  return (\n    <div id=\"app\" className=\"d-flex flex-column h-100\">\n      <div className=\"container flex-grow-1\">\n        <div className=\"mt-5\">\n          {/*<BrowserRouter>*/}\n            <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path='/studies' component={Studies} />\n            <Route path=\"/manage\" component={Manage} />\n            <Route path=\"/storage\" component={UploadFiles} />\n            <Route path=\"/share\" component={share} />\n          </Switch>\n          {/*</BrowserRouter>*/}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",["116","117"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/storage.js",["118","119","120"],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/services/upload-files.service.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/loading.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/components/logout-button.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/auth/protected-route.js",[],"/Users/dhwanildesai/PycharmProjects/ctni-react/src/makeData.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":18},{"ruleId":"125","severity":1,"message":"129","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":16},{"ruleId":"125","severity":1,"message":"130","line":10,"column":20,"nodeType":"127","messageId":"128","endLine":10,"endColumn":26},{"ruleId":"125","severity":1,"message":"131","line":11,"column":3,"nodeType":"127","messageId":"128","endLine":11,"endColumn":8},{"ruleId":"125","severity":1,"message":"132","line":12,"column":3,"nodeType":"127","messageId":"128","endLine":12,"endColumn":7},{"ruleId":"125","severity":1,"message":"133","line":27,"column":8,"nodeType":"127","messageId":"128","endLine":27,"endColumn":16},{"ruleId":"125","severity":1,"message":"134","line":29,"column":8,"nodeType":"127","messageId":"128","endLine":29,"endColumn":16},{"ruleId":"125","severity":1,"message":"135","line":33,"column":8,"nodeType":"127","messageId":"128","endLine":33,"endColumn":13},{"ruleId":"125","severity":1,"message":"136","line":36,"column":6,"nodeType":"127","messageId":"128","endLine":36,"endColumn":7},{"ruleId":"125","severity":1,"message":"137","line":301,"column":9,"nodeType":"127","messageId":"128","endLine":301,"endColumn":14},{"ruleId":"125","severity":1,"message":"138","line":496,"column":8,"nodeType":"127","messageId":"128","endLine":496,"endColumn":24},{"ruleId":"125","severity":1,"message":"139","line":500,"column":7,"nodeType":"127","messageId":"128","endLine":500,"endColumn":13},{"ruleId":"125","severity":1,"message":"140","line":501,"column":7,"nodeType":"127","messageId":"128","endLine":501,"endColumn":14},{"ruleId":"125","severity":1,"message":"141","line":502,"column":7,"nodeType":"127","messageId":"128","endLine":502,"endColumn":15},{"ruleId":"125","severity":1,"message":"142","line":503,"column":7,"nodeType":"127","messageId":"128","endLine":503,"endColumn":14},{"ruleId":"125","severity":1,"message":"143","line":729,"column":10,"nodeType":"127","messageId":"128","endLine":729,"endColumn":23},{"ruleId":"125","severity":1,"message":"144","line":776,"column":7,"nodeType":"127","messageId":"128","endLine":776,"endColumn":15},{"ruleId":"145","severity":1,"message":"146","line":887,"column":1,"nodeType":"147","messageId":"148","endLine":887,"endColumn":24,"fix":"149"},{"ruleId":"121","replacedBy":"150"},{"ruleId":"123","replacedBy":"151"},{"ruleId":"125","severity":1,"message":"152","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":14},{"ruleId":"125","severity":1,"message":"153","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":28},{"ruleId":"125","severity":1,"message":"135","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":13},{"ruleId":"125","severity":1,"message":"154","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":15},{"ruleId":"125","severity":1,"message":"155","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":15},{"ruleId":"125","severity":1,"message":"126","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":18},{"ruleId":"125","severity":1,"message":"156","line":3,"column":20,"nodeType":"127","messageId":"128","endLine":3,"endColumn":46},{"ruleId":"125","severity":1,"message":"157","line":6,"column":19,"nodeType":"127","messageId":"128","endLine":6,"endColumn":29},{"ruleId":"121","replacedBy":"158"},{"ruleId":"123","replacedBy":"159"},{"ruleId":"125","severity":1,"message":"160","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":23},{"ruleId":"125","severity":1,"message":"161","line":6,"column":8,"nodeType":"127","messageId":"128","endLine":6,"endColumn":22},{"ruleId":"121","replacedBy":"162"},{"ruleId":"123","replacedBy":"163"},{"ruleId":"125","severity":1,"message":"164","line":6,"column":8,"nodeType":"127","messageId":"128","endLine":6,"endColumn":13},{"ruleId":"125","severity":1,"message":"165","line":8,"column":8,"nodeType":"127","messageId":"128","endLine":8,"endColumn":15},{"ruleId":"125","severity":1,"message":"166","line":197,"column":13,"nodeType":"127","messageId":"128","endLine":197,"endColumn":26},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'useAuth0' is defined but never used.","Identifier","unusedVar","'saveAs' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'jsondata' is defined but never used.","'makeData' is defined but never used.","'async' is defined but never used.","'h' is assigned a value but never used.","'count' is assigned a value but never used.","'selectedFlatRows' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'groupBy' is assigned a value but never used.","'expanded' is assigned a value but never used.","'filters' is assigned a value but never used.","'roundedMedian' is defined but never used.","'photoZip' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property assign.","MemberExpression","unexpectedWhitespace",{"range":"169","text":"170"},["167"],["168"],"'styled' is defined but never used.","'sharedgrabbedarray' is defined but never used.","'AuthNav' is defined but never used.","'Loading' is defined but never used.","'withAuthenticationRequired' is defined but never used.","'setMessage' is assigned a value but never used.",["167"],["168"],"'BrowserRouter' is defined but never used.","'ProtectedRoute' is defined but never used.",["167"],["168"],"'axios' is defined but never used.","'emailjs' is defined but never used.","'selectedFiles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[22702,22704],"."]